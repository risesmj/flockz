// DO NOT EDIT.  This file was generated by resource_importer.
// Checksum: 2f0ba257a1eee6c7b8c7dbd8b64043a61dba359c

// ignore_for_file: always_specify_types
// ignore_for_file: always_use_package_imports
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: prefer_single_quotes
// ignore_for_file: public_member_api_docs
// ignore_for_file: require_trailing_commas

var schedulerTemplate =
    "#include \"totvs.ch\"\r\n\r\nStatic  N_TRY_JOB    := 2\r\n\r\n/*/{Protheus.doc} User Function \$_name\r\nScheduler\r\n@type Function\r\n@author Flockz Generator\r\n@since \$_since\r\n/*/\r\nUser Function \$_name()\r\n\tLocal   cLockFile   as character\r\n\tLocal   cTaskId     as character\r\n\tLocal   nHdlJob     as numeric\r\n\tLocal   nX          as numeric\r\n\r\n\tcLockFile   := \"\"\r\n\tcTaskId     := FWGetIDTask()\r\n\tnHdlJob     := 0\r\n\r\n\tcLockFile := Lower(\"\$_name\" + cEmpAnt + cFilAnt + cTaskId) + \".lck\"\r\n\r\n\tFor nX := 1 To N_TRY_JOB\r\n\t\tIf ! jobIsRunning(cLockFile)\r\n\t\t\tnHdlJob := JobSetRunning(cLockFile,.T.)\r\n\t\t\tIf nHdlJob >= 0\r\n\t\t\t\tConOut(\"[\$_name][\"+FWTimeStamp(2)+\"][INFO]: Iniciando processamento.\")\r\n\t\t\t\tfProcessar()\r\n\t\t\t\tConOut(\"[\$_name][\"+FWTimeStamp(2)+\"][INFO]: Finalizando processamento.\")\r\n\t\t\tEndIf\r\n\r\n\t\t\tjobSetRunning(cLockFile,.F.,nHdlJob)\r\n\t\t\tExit\r\n\t\tElse\r\n\t\t\tConOut(\"[\$_name][\"+FWTimeStamp(2)+\"][ERROR]: Thread em LOCK\")\r\n\t\t\tSleep(3000)\r\n\t\tEndIf\r\n\tNext nX\r\n\r\nReturn\r\n\r\n/*/{Protheus.doc} SchedDef\r\nSchedDef\r\nda rotina.\r\n@type Function\r\n@author Flockz Generator\r\n@since \$_since\r\n@return aParams, array, Retorna as perguntas definidas no schedule.*/\r\nStatic Function SchedDef()\r\n\tLocal aParams := {}\r\n\tLocal cPerg := PadR(\"PARAMDEF\",10)\r\n\r\n\taParams := {;\r\n\t\t\"P\"   ,; // Tipo R para relatorio P para processo\r\n\tcPerg,; // Pergunte do relatorio, caso nao use passar ParamDef\r\n\tnil   ,; // Alias\r\n\tnil   ,; // Array de ordens\r\n\tnil    } // Titulo\r\n\r\nReturn aParams\r\n\r\n/*/{Protheus.doc} fProcessar\r\nRealiza o processamento do scheduler\r\n@type Function\r\n@author Flockz Generator\r\n@since \$_since\r\n/*/\r\nStatic Function fProcessar()\r\n\r\nReturn";

var objectTemplate =
    "#include \"totvs.ch\"\r\n\r\n/*/{Protheus.doc} \$_name\r\nClass\r\n@author Flockz Generator\r\n@since \$_since\r\n/*/\r\nClass \$_name\r\n\r\n\tpublic  Method  new()\r\n\r\nEndClass\r\n\r\nMethod New() Class \$_name\r\nReturn";

var restTemplate =
    "#include \"totvs.ch\"\r\n#include \"tlpp-rest.th\"\r\n\r\n#define FUNNAME_LOG \"\$_name\"\r\n\r\n/*/{Protheus.doc} \$_name\r\nClass REST API\r\n@author Flockz Generator\r\n@since \$_since\r\n@version version\r\n/*/\r\nClass \$_name\r\n\r\n\tpublic  Method  New()\r\n\r\n\t@GET(\"/route\")\r\n    public  Method  get()\r\n\r\nEndClass\r\n\r\nMethod  New() Class \$_name\r\nReturn\r\n\r\n/*/{Protheus.doc} get\r\nGET Route\r\n@author Flockz Generator\r\n@since \$_since\r\n@return lRet, logical, AllwaysTrue\r\n/*/\r\nMethod get() Class \$_name\r\n\tLocal   cMessage    as character\r\n\tLocal   lOk         as logical\r\n\tLocal   lRet        as logical\r\n\tLocal   jParams     as json\r\n\r\n\tlRet        := AllWaysTrue()\r\n\tjParams     := oRest:getQueryRequest()\r\n\tlOk         := .T.\r\n\tcMessage    := \"\"\r\n\r\n\tBegin Sequence\r\n\r\n\t\tcMessage := \"OK\"\r\n\r\n\t\tRecover\r\n\t\tlOk := .F.\r\n\t\t//Mensagem de erro default\r\n\t\tIf Empty(cMessage)\r\n\t\t\tcMessage := ERROR_DEFAULT\r\n\t\tEndIf\r\n\r\n\tEnd Sequence\r\n\r\n\t//Response\r\n\tu_appSetJsonResponse(lOk,cMessage,cMessage,FUNNAME_LOG)\r\n\r\nReturn lRet\r\n";

var mapExpTemplate =
    "#include \"totvs.ch\"\r\n\r\n//  1-cod produto\r\n//  2-local/armazem\r\n//  3-end retirada\r\n//  4-quant\r\n//  5-end destino\r\n//  6-ID palete\r\n//  7-fraciona palete\r\n//  8-serie nota orig\r\n//  9-nota orig\r\n// 10-item nota orig\r\n// 11-sequencial\r\n// 12-numseq\r\n// 13-id volume\r\n// 14-Lote\r\n// 15-Tipo de Estoque\r\n// 16-Quantidade Seg Unid\r\nStatic\tMAP_CODPRO\t:= 1\r\nStatic\tMAP_LOCAL\t:= 2\r\nStatic\tMAP_ENDORI\t:= 3\r\nStatic\tMAP_QUANT\t:= 4\r\nStatic\tMAP_ENDDES\t:= 5\r\nStatic\tMAP_PALLET\t:= 6\r\nStatic\tMAP_FRAPLT\t:= 7\r\nStatic\tMAP_SERORI\t:= 8\r\nStatic\tMAP_NOTAORI\t:= 9\r\nStatic\tMAP_ITORIG\t:= 10\r\nStatic\tMAP_SEQUENC\t:= 11\r\nStatic\tMAP_NUMSEQ\t:= 12\r\nStatic\tMAP_ETQVOL\t:= 13\r\nStatic\tMAP_LOTCTL\t:= 14\r\nStatic\tMAP_TPESTO\t:= 15\r\nStatic\tMAP_QTDSEG\t:= 16\r\n\r\n\r\n/*/{Protheus.doc} User Function \$_name\r\nCalcula o mapa de apanhe\r\n@type  Function\r\n@author Flockz Generator\r\n@since \$_since\r\n@return aRet, array, [1] - Erro, [2] - Mapa de apanhe, [3] - Recnos em lock\r\n/*/\r\nUser Function \$_name()\r\n\tLocal\taZ08\t\t:= {} as array\r\n\tLocal\taLocks\t\t:= {} as array\r\n\tLocal\tcError\t\t:= \"\" as character\r\n\tLocal\tcAliasIt\tas character\r\n\tLocal   lRet        := .T. as logical\r\n\r\n    cOndSep := PARAMIXB[1]\r\n\r\n\tBegin Sequence\r\n\r\n\t\tIf ! getItensOrder(cOndSep, @cAliasIt)\r\n\t\t\tcError := \"Não foi possível recuperar os itens do pedido de venda\"\r\n\t\t\tBreak\r\n\t\tEndIf\r\n\r\n\t\tIf ! validateBalance(@cError,@aLocks,@aZ08,cAliasIt)\r\n\t\t\tBreak\r\n\t\tEndIf\r\n\r\n\t\tRecover\r\n\t\tlRet := .F.\r\n\t\tu_FTUnlock(aLocks)\r\n\r\n\tEnd Sequence\r\n\r\n    aRet := {}\r\n    aAdd(aRet,cError)\r\n    aAdd(aRet,aZ08)\r\n    aAdd(aRet,aLocks)\r\n\r\nReturn aRet\r\n\r\n/*/{Protheus.doc} validateBalance\r\nPrepara a tabela temporária com os itens que serão\r\ncalculados o mapa.\r\n@type  Static Function\r\n@author Flockz Generator\r\n@since \$_since\r\n@param cError, characters, referência do erro\r\n@param aZ08, array, referência do mapa gerado\r\n@param cAliasIt, characters, tabela temporária dos produtos solicitados\r\n@return lRet, logical, true ou false\r\n/*/\r\nStatic Function getItensOrder(cOndSep as character, cAliasIt as character)\r\n\tLocal \tcQuery \t\tas character\r\n\tDefault\tcAliasIt\t:= \"\"\r\n\r\n\tcAliasIt\t:= getNextAlias()\r\n\tcQuery := \" SELECT C6_PRODUTO,\"\r\n\tcQuery += \"        C6_LOCAL,\"\r\n\tcQuery += \"        C6_LOTECTL,\"\r\n\tcQuery += \"        C6_ZTPESTO,\"\r\n\tcQuery += \"        C6_NUM,\"\r\n\tcQuery += \"        Z58_CODCLI,\"\r\n\tcQuery += \"        Z58_LOJCLI,\"\r\n\tcQuery += \"        SUM(SC6.C6_QTDVEN) SOLICITADO\"\r\n\tcQuery += \" FROM \" + RetSqlTab(\"Z58\") + \" (NOLOCK)\"\r\n\tcQuery += \" INNER JOIN \" + RetSqlTab(\"SC6\") + \" (NOLOCK) ON (   C6_FILIAL = Z58.Z58_FILIAL\"\r\n\tcQuery += \"                                                     AND C6_NUM = Z58.Z58_PEDIDO\"\r\n\tcQuery += \"                                                     AND SC6.D_E_L_E_T_ = ' ')\"\r\n\tcQuery += \" INNER JOIN \" + RetSqlTab(\"SB1\") + \" (NOLOCK) ON (   B1_FILIAL = ' '\"\r\n\tcQuery += \"                                                     AND B1_COD = C6_PRODUTO\"\r\n\tcQuery += \"                                                     AND B1_RASTRO != 'L'\"\r\n\tcQuery += \"                                                     AND SB1.D_E_L_E_T_ = ' ')\"\r\n\tcQuery += \" WHERE \" + RetSqlCond(\"Z58\")\r\n\tcQuery += \" AND Z58_CODIGO = \" + ValToSql(cOndSep)\r\n\tcQuery += \" GROUP BY    C6_PRODUTO,\"\r\n\tcQuery += \"             C6_LOCAL,\"\r\n\tcQuery += \"             C6_LOTECTL,\"\r\n\tcQuery += \"             C6_NUM,\"\r\n\tcQuery += \"             C6_ZTPESTO,\"\r\n\tcQuery += \"        \t\tZ58_CODCLI,\"\r\n\tcQuery += \"        \t\tZ58_LOJCLI\"\r\n\tcQuery += \"\tUNION ALL\"\r\n\tcQuery += \" SELECT\tZ45_CODPRO C6_PRODUTO,\"\r\n\tcQuery += \"       \tZ45_LOCAL C6_LOCAL,\"\r\n\tcQuery += \"       \tZ45_LOTCTL C6_LOTECTL,\"\r\n\tcQuery += \" \t \t(SELECT TOP 1 C6_ZTPESTO\"\r\n\tcQuery += \" \t \tFROM \" + RetSqlName(\"SC6\")\r\n\tcQuery += \" \t \tWHERE C6_FILIAL = Z45_FILIAL\"\r\n\tcQuery += \" \t \tAND C6_NUM = Z45_PEDIDO\"\r\n\tcQuery += \" \t \tAND C6_PRODUTO = Z45_CODPRO\"\r\n\tcQuery += \" \t \tAND C6_LOCAL = Z45_LOCAL\"\r\n\tcQuery += \" \t \tAND D_E_L_E_T_ =  ' ') C6_ZTPESTO,\"\r\n\tcQuery += \"        \tZ45_PEDIDO C6_NUM,\"\r\n\tcQuery += \"        \tZ58_CODCLI,\"\r\n\tcQuery += \"        \tZ58_LOJCLI,\"\r\n\tcQuery += \"        \tSUM(Z45.Z45_QUANT) SOLICITADO\"\r\n\tcQuery += \" FROM \" + RetSqlTab(\"Z58\") + \" (NOLOCK)\"\r\n\tcQuery += \" INNER JOIN \" + RetSqlTab(\"Z45\") + \" (NOLOCK) ON (   Z45_FILIAL = Z58.Z58_FILIAL\"\r\n\tcQuery += \"                                                     AND Z45_PEDIDO = Z58.Z58_PEDIDO\"\r\n\tcQuery += \"                                                     AND Z45.D_E_L_E_T_ = ' ')\"\r\n\tcQuery += \" WHERE \" + RetSqlCond(\"Z58\")\r\n\tcQuery += \" AND Z58_CODIGO = \" + ValToSql(cOndSep)\r\n\tcQuery += \" GROUP BY    Z45_CODPRO,\"\r\n\tcQuery += \"             Z45_FILIAL,\"\r\n\tcQuery += \"             Z45_LOCAL,\"\r\n\tcQuery += \"             Z45_LOTCTL,\"\r\n\tcQuery += \"             Z45_PEDIDO,\"\r\n\tcQuery += \"        \t\tZ58_CODCLI,\"\r\n\tcQuery += \"        \t\tZ58_LOJCLI\"\r\n\r\n\r\n\tMPSysOpenQuery(cQuery,cAliasIt)\r\n\t(cAliasIt)->(dbGoTop())\r\n\r\n\tIf (cAliasIt)->( EoF() )\r\n\t\tReturn .F.\r\n\tEndIf\r\n\r\nReturn .T.\r\n\r\n/*/{Protheus.doc} validateBalance\r\nValida o e resgata os paletes dos produtos solicitados\r\n@type  Static Function\r\n@author Flockz Generator\r\n@since \$_since\r\n@param cError, characters, referência do erro\r\n@param aZ08, array, referência do mapa gerado\r\n@param cAliasIt, characters, tabela temporária dos produtos solicitados\r\n@return lRet, logical, true ou false\r\n/*/\r\nStatic Function validateBalance(cError,aLocks,aZ08,cAliasIt)\r\n\tLocal\tlRet\t:= .T. as logical\r\n\r\n\tWhile (cAliasIt)->( ! EoF() )\r\n\r\n\t\tIf ! calculateMap(@cError,aLocks,aZ08,(cAliasIt)->C6_NUM,(cAliasIt)->C6_PRODUTO,(cAliasIt)->C6_LOCAL,(cAliasIt)->C6_LOTECTL,(cAliasIt)->C6_ZTPESTO,(cAliasIt)->SOLICITADO,(cAliasIt)->Z58_CODCLI,(cAliasIt)->Z58_LOJCLI)\r\n\t\t\tlRet := .F.\r\n\t\t\tExit\r\n\t\tEndIf\r\n\r\n\t\t(cAliasIt)->(dbSkip())\r\n\r\n\tEndDo\r\n\r\n\t(cAliasIt)->(dbCloseArea())\r\n\r\nReturn lRet\r\n\r\n/*/{Protheus.doc} calculateMap\r\nValida o saldo do produto/lote solicita e reserva os registros.\r\n@type Function\r\n@author Flockz Generator\r\n@since \$_since\r\n@param cError, characters, referência do erro\r\n@param aLocks, array, registros em softlock\r\n@param aZ08, array, referência do mapa de apanhe\r\n@param cPedido, characters, número do pedido de venda\r\n@param cCodPro, characters, código de produto\r\n@param cLocal, characters, armazém\r\n@param cLoteCtl, characters, lote\r\n@param nQtdSolicitado, numerics, quantidade solicitada \r\n@param cCodCli, characters, código do cliente\r\n@param cCodLoj, characters, loja do cliente\r\n@return lRet, logical, true ou false\r\n/*/\r\nStatic Function calculateMap(cError,aLocks,aZ08,cPedido,cCodPro,cLocal,cLoteCtl,cTpEsto,nQtdSolicitado,cCodCli,cCodLoj)\r\n\tLocal\tcQuery\t\t\tas character\r\n\tLocal   cFraPlt         as character\r\n    Local   cAliasQry       as character\r\n\tLocal \tcEstFis \t\tas character\r\n\tLocal\tlRet\t\t\tas logical\r\n    Local   lRastro         as logical\r\n\tLocal   nQtdMapa        as numeric\r\n\tDefault\tcPedidoAtual\t:= \"\"\r\n\r\n\t//Inicializa as variáveis\r\n\tlRet\t\t\t:= .T.\r\n\tcEstFis \t\t:= U_FtWmsParam(\"WMS_EXPEDICAO_MAPA_APANHE_ESTRUTURA_FISICA\",\"C\",\"000002/000003/000007/000010\",.F.,\"\",cCodCli,cCodLoj,nil,nil)\r\n\tcAliasQry\t\t:= getNextAlias()\r\n\tlRastro         := Posicione(\"SB1\",1,xFilial(\"SB1\")+cCodPro,\"B1_RASTRO\") == \"L\"\r\n\r\n\t//Valida se há saldo disponível\r\n\tcQuery := \" SELECT  Z16_ETQPAL,\"\r\n\tcQuery += \"         Z16_LOTCTL,\"\r\n\tcQuery += \"         Z16_CODPRO,\"\r\n\tcQuery += \"         Z16_ENDATU,\"\r\n\tcQuery += \"         Z16_LOCAL,\"\r\n\tcQuery += \"\t\t\tZ16_TPESTO,\"\r\n\tcQuery += \"         Z16_SALDO - (   SELECT ISNULL(Sum(Z08_QUANT), 0)\"\r\n\tcQuery += \"                         FROM   \" + RetSqlTab(\"Z08\")\r\n\tcQuery += \"                         WHERE  \" + RetSqlCond(\"Z08\")\r\n\tcQuery += \"                         AND Z08_PALLET = Z16_ETQPAL\"\r\n\tcQuery += \"                         AND Z08_PRODUT = Z16_CODPRO\"\r\n\tcQuery += \"                         AND Z08_LOTCTL = Z16_LOTCTL\"\r\n\tcQuery += \"                         AND Z08_STATUS != 'R'\"\r\n\tcQuery += \"                         AND Z08_TPOPER = 'S'\r\n\tcQuery += \"                     ) SALDO\"\r\n\tcQuery += \" FROM (\"\r\n\tcQuery += \"     SELECT  Z16_ETQPAL,\"\r\n\tcQuery += \"             Z16_LOTCTL,\"\r\n\tcQuery += \"             Z16_CODPRO,\"\r\n\tcQuery += \"             Z16_ENDATU,\"\r\n\tcQuery += \"             Z16_LOCAL,\"\r\n\tcQuery += \"\t\t\t\tZ16_TPESTO,\"\r\n\tcQuery += \"             SUM(Z16_SALDO) Z16_SALDO\"\r\n\tcQuery += \"     FROM \" + RetSqlTab(\"Z16\")\r\n\r\n\tIf lRastro\r\n\t\tcQuery += \" INNER JOIN \" + RetSqlTab(\"Z45\") + \" (NOLOCK) ON (   Z45_FILIAL = Z16_FILIAL\"\r\n\t\tcQuery += \"                                                     AND Z45_ETQPAL = Z16_ETQPAL\"\r\n\t\tcQuery += \"                                                     AND Z45_CODPRO = Z16_CODPRO\"\r\n\t\tcQuery += \"                                                     AND Z45_LOTCTL = Z16_LOTCTL\"\r\n        cQuery += \"                                                     AND Z45_ENDATU = Z16_ENDATU\"\r\n        cQuery += \"                                                     AND Z45_LOCAL = Z16_LOCAL\"\r\n\t\tcQuery += \"                                                     AND Z45_PEDIDO = \" + ValToSql(cPedido)\r\n\t\tcQuery += \"                                                     AND Z45.D_E_L_E_T_ = ' ')\"\r\n\tEndIf\r\n\r\n\tcQuery += \"     INNER JOIN \" + RetSqlTab(\"SBE\") + \" (NOLOCK) \"\r\n\tcQuery += \"                ON \" + RetSqlCond(\"SBE\")\r\n\tcQuery += \"                   AND SBE.BE_LOCAL = Z16.Z16_LOCAL\r\n\tcQuery += \"                   AND SBE.BE_LOCALIZ = Z16.Z16_ENDATU\r\n\tcQuery += \"                   AND SBE.BE_STATUS != '3'\r\n\tcQuery += \"                   AND SBE.BE_ESTFIS IN \" + FormatIn(cEstFis,\"/\")\r\n\tcQuery += \"     WHERE \" + RetSqlCond(\"Z16\")\r\n\tcQuery += \"     AND Z16_CODPRO = \" + ValToSql(cCodPro)\r\n\tcQuery += \"     AND Z16_LOCAL = \" + ValToSql(cLocal)\r\n\tcQuery += \"     AND Z16_TPESTO = \" + ValToSql(cTpEsto)\r\n\r\n\tIf lRastro\r\n\t\tcQuery += \" AND Z16_LOTCTL = \" + ValToSql(cLoteCtl)\r\n\tEndIf\r\n\r\n\tcQuery += \"     AND Z16_SALDO > 0\"\r\n\tcQuery += \"     AND (SELECT ISNULL(COUNT(DISTINCT( Z08_NUMOS )), 0)\"\r\n\tcQuery += \"                 FROM   \" + RetSqlTab(\"Z08\")\r\n\tcQuery += \"                 WHERE  \" + RetSqlCond(\"Z08\")\r\n\tcQuery += \"                        AND Z08_PALLET = Z16.Z16_ETQPAL\"\r\n\tcQuery += \"                        AND Z08_PRODUT = Z16.Z16_CODPRO\"\r\n\tcQuery += \"                        AND Z08_STATUS != 'R'\"\r\n\tcQuery += \"                        AND Z08_TPOPER = 'I') = 0\"\r\n\tcQuery += \"     AND (SELECT ISNULL(COUNT(DISTINCT( Z21_IDENT )), 0) AS 'CTGZ21'\"\r\n\tcQuery += \"                 FROM   \" + RetSqlTab(\"Z21\") + \" (NOLOCK)\"\r\n\tcQuery += \"                 WHERE  \" + RetSqlCond(\"Z21\")\r\n\tcQuery += \"                        AND Z21_PROD = Z16.Z16_CODPRO\"\r\n\tcQuery += \"                        AND Z21_ETQPAL = Z16.Z16_ETQPAL\"\r\n\tcQuery += \"                        AND Z21_IDENT IN (SELECT Z06_NUMOS\"\r\n\tcQuery += \"                                          FROM   \" + RetSqlTab(\"Z06\") + \" (NOLOCK)\"\r\n\tcQuery += \"                                          WHERE\tZ06_FILIAL = Z21_FILIAL\r\n\tcQuery += \"                                                 AND Z06_SERVIC = 'T02'\"\r\n\tcQuery += \"                                                 AND Z06_NUMOS = Z21_IDENT\"\r\n\tcQuery += \"                                                 AND D_E_L_E_T_ = ' '\"\r\n\tcQuery += \"                                                 AND Z06_STATUS NOT IN ( 'FI', 'CA' ))) = 0\"\r\n\tcQuery += \"     AND Z16_PEDIDO = ' '\"\r\n\tcQuery += \"     AND Z16_TPESTO != 'XXXXXX'\"\r\n\tcQuery += \"     AND Z16_ORIGEM != 'VOL'\"\r\n\tcQuery += \" \tGROUP BY  \tZ16_ETQPAL,\"\r\n\tcQuery += \" \t          \tZ16_LOTCTL, \"\r\n\tcQuery += \" \t          \tZ16_CODPRO, \"\r\n\tcQuery += \" \t          \tZ16_ENDATU, \"\r\n\tcQuery += \" \t          \tZ16_LOCAL, \"\r\n\tcQuery += \"\t\t\t\t\tZ16_TPESTO\"\r\n\tcQuery += \" ) AS SUB\"\r\n\tcQuery += \" ORDER BY Z16_ETQPAL\"\r\n\tMPSysOpenQuery(cQuery,cAliasQry)\r\n\t(cAliasQry)->(dbGoTop())\r\n\r\n\tWhile (cAliasQry)->( ! EoF() ) .and. nQtdSolicitado > 0\r\n\r\n\t\t//Tenta reservar o palete, se não conseguir, utiliza outro\r\n\t\tcQuery := \" SELECT R_E_C_N_O_ RECNO\"\r\n\t\tcQuery += \" FROM \" + RetSqlTab(\"Z16\") + \" (NOLOCK)\"\r\n\t\tcQuery += \" WHERE \" + RetSqlCond(\"Z16\")\r\n\t\tcQuery += \" AND Z16_ETQPAL = \" + ValToSql((cAliasQry)->Z16_ETQPAL)\r\n\t\tcQuery += \" AND Z16_SALDO > 0\"\r\n\r\n\t\tIf (cAliasQry)->SALDO > 0 .and. U_appLockFromQuery(\"Z16\",cQuery,@aLocks)\r\n\r\n\t\t\t//Se o solicitado for maior que o saldo do palete, resgata o palet inteiro\r\n\t\t\tIf nQtdSolicitado >= (cAliasQry)->SALDO\r\n\t\t\t\tnQtdMapa \t\t:= (cAliasQry)->SALDO\r\n\t\t\t\tcFraPlt     \t:= \"N\"\r\n\t\t\t\tnQtdSolicitado\t-= (cAliasQry)->SALDO\r\n\t\t\t\t//Caso contrário, resgata o palete fracionado\r\n\t\t\tElse\r\n\t\t\t\tnQtdMapa \t\t:= nQtdSolicitado\r\n\t\t\t\tcFraPlt     \t:= \"S\"\r\n\t\t\t\tnQtdSolicitado\t:= 0\r\n\t\t\tEndIf\r\n\r\n\t\t\t//Adiciona no mapa\r\n\t\t\taAdd(aZ08,Array(16))\r\n\t\t\taZ08[Len(aZ08)][MAP_CODPRO]\t\t:= cCodPro\r\n\t\t\taZ08[Len(aZ08)][MAP_LOCAL]\t\t:= (cAliasQry)->Z16_LOCAL\r\n\t\t\taZ08[Len(aZ08)][MAP_ENDORI]\t\t:= (cAliasQry)->Z16_ENDATU\r\n\t\t\taZ08[Len(aZ08)][MAP_QUANT]\t\t:= nQtdMapa\r\n\t\t\taZ08[Len(aZ08)][MAP_ENDDES]\t\t:= \"\"\r\n\t\t\taZ08[Len(aZ08)][MAP_PALLET]\t\t:= (cAliasQry)->Z16_ETQPAL\r\n\t\t\taZ08[Len(aZ08)][MAP_FRAPLT]\t\t:= cFraPlt\r\n\t\t\taZ08[Len(aZ08)][MAP_SERORI]\t\t:= \"\"\r\n\t\t\taZ08[Len(aZ08)][MAP_NOTAORI]\t:= \"\"\r\n\t\t\taZ08[Len(aZ08)][MAP_ITORIG]\t\t:= \"\"\r\n\t\t\taZ08[Len(aZ08)][MAP_SEQUENC]\t:= \"\"\r\n\t\t\taZ08[Len(aZ08)][MAP_NUMSEQ]\t\t:= \"\"\r\n\t\t\taZ08[Len(aZ08)][MAP_ETQVOL]\t\t:= \"\"\r\n\t\t\taZ08[Len(aZ08)][MAP_LOTCTL]\t\t:= (cAliasQry)->Z16_LOTCTL\r\n\t\t\taZ08[Len(aZ08)][MAP_TPESTO]\t\t:= (cAliasQry)->Z16_TPESTO\r\n\t\t\taZ08[Len(aZ08)][MAP_QTDSEG]\t\t:= 0\r\n\r\n\t\tEndIf\r\n\r\n\t\t(cAliasQry)->(dbSkip())\r\n\r\n\tEndDo\r\n\r\n\t(cAliasQry)->(dbCloseArea())\r\n\r\n\tIf nQtdSolicitado > 0\r\n\t\tcError := \"Não há saldo disponível para o produto \" + cCodPro + \". Faltam \" + cValToChar(nQtdSolicitado) + \" de saldo.\"\r\n\t\tlRet := .F.\r\n\tEndIf\r\n\r\nReturn lRet\r\n";
